name: Deploy to AGI Staffers VPS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  VPS_HOST: 148.230.93.174
  VPS_USER: root

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Validate HTML files
      run: |
        echo "Validating admin dashboard files..."
        if [ -f admin-dashboard-local/index.html ]; then
          echo "✅ index.html found"
        else
          echo "❌ index.html not found"
          exit 1
        fi
        
        if [ -f admin-dashboard-local/manifest.json ]; then
          echo "✅ manifest.json found"
        else
          echo "❌ manifest.json not found"
          exit 1
        fi
        
        if [ -f admin-dashboard-local/sw-enhanced.js ]; then
          echo "✅ Service worker found"
        else
          echo "❌ Service worker not found"
          exit 1
        fi
        
        echo "✅ All required files present"

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup SSH Key
      env:
        SSH_PRIVATE_KEY: ${{ secrets.VPS_SSH_KEY }}
      run: |
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ env.VPS_HOST }} >> ~/.ssh/known_hosts
    
    - name: Deploy Admin Dashboard
      run: |
        # Create deployment package
        tar -czf admin-dashboard.tar.gz admin-dashboard-local/
        
        # Copy to VPS
        scp admin-dashboard.tar.gz ${{ env.VPS_USER }}@${{ env.VPS_HOST }}:/tmp/
        
        # Deploy on VPS
        ssh ${{ env.VPS_USER }}@${{ env.VPS_HOST }} << 'ENDSSH'
          # Backup current version
          if [ -d "/root/agi-staffers-platform/admin-dashboard" ]; then
            cp -r /root/agi-staffers-platform/admin-dashboard /root/agi-staffers-platform/admin-dashboard.backup
          fi
          
          # Extract new version
          cd /tmp
          tar -xzf admin-dashboard.tar.gz
          
          # Copy to production
          cp -r admin-dashboard-local/* /root/agi-staffers-platform/admin-dashboard/
          
          # Copy to nginx directory
          docker exec admin-dashboard sh -c "cp -r /app/* /usr/share/nginx/html/"
          
          # Restart container
          docker restart admin-dashboard
          
          # Health check
          sleep 5
          if curl -f -s https://admin.agistaffers.com > /dev/null; then
            echo "✅ Deployment successful!"
            rm -f /root/agi-staffers-platform/admin-dashboard.backup
          else
            echo "❌ Deployment failed! Rolling back..."
            rm -rf /root/agi-staffers-platform/admin-dashboard
            mv /root/agi-staffers-platform/admin-dashboard.backup /root/agi-staffers-platform/admin-dashboard
            docker restart admin-dashboard
            exit 1
          fi
          
          # Cleanup
          rm -f /tmp/admin-dashboard.tar.gz
        ENDSSH
    
    - name: Verify Deployment
      run: |
        sleep 10
        response=$(curl -s -o /dev/null -w "%{http_code}" https://admin.agistaffers.com)
        if [ "$response" = "200" ]; then
          echo "✅ Admin dashboard is accessible!"
        else
          echo "❌ Admin dashboard returned HTTP $response"
          exit 1
        fi
    
    - name: Clean up SSH
      if: always()
      run: rm -f ~/.ssh/id_rsa

  deploy-other-services:
    name: Deploy Other Services
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup SSH Key
      env:
        SSH_PRIVATE_KEY: ${{ secrets.VPS_SSH_KEY }}
      run: |
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ env.VPS_HOST }} >> ~/.ssh/known_hosts
    
    - name: Deploy Docker Compose Changes
      if: contains(github.event.head_commit.modified, 'docker-compose')
      run: |
        scp docker-compose*.yml ${{ env.VPS_USER }}@${{ env.VPS_HOST }}:/root/agi-staffers-platform/
        
        ssh ${{ env.VPS_USER }}@${{ env.VPS_HOST }} << 'ENDSSH'
          cd /root/agi-staffers-platform
          docker-compose pull
          docker-compose up -d --remove-orphans
          
          # Health check all services
          sleep 30
          docker-compose ps
        ENDSSH
    
    - name: Clean up SSH
      if: always()
      run: rm -f ~/.ssh/id_rsa

  notify:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [deploy, deploy-other-services]
    if: always()
    
    steps:
    - name: Send Notification
      run: |
        if [ "${{ needs.deploy.result }}" = "success" ]; then
          echo "✅ Deployment to AGI Staffers VPS completed successfully!"
          echo "🌐 Live at: https://admin.agistaffers.com"
        else
          echo "❌ Deployment failed! Check the logs for details."
        fi