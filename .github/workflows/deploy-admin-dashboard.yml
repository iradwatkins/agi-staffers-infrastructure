name: Deploy Admin Dashboard

on:
  push:
    branches:
      - main
    paths:
      - 'admin-dashboard-local/**'
      - '.github/workflows/deploy-admin-dashboard.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  DOCKER_IMAGE: admin-dashboard
  CONTAINER_NAME: admin-dashboard
  SERVER_HOST: 148.230.93.174
  SERVER_USER: root

jobs:
  test:
    name: Test Dashboard
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Validate HTML
        run: |
          npm install -g html-validate
          html-validate admin-dashboard-local/*.html || true
          
      - name: Check JavaScript syntax
        run: |
          npm install -g jshint
          jshint admin-dashboard-local/*.js --exclude admin-dashboard-local/*.min.js || true
          
      - name: Security scan
        run: |
          # Check for exposed secrets
          grep -r "password\|secret\|key" admin-dashboard-local/ | grep -v "\.git" | grep -v "VAPID" || true

  build:
    name: Build Dashboard
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Create Dockerfile
        run: |
          cat > admin-dashboard-local/Dockerfile << 'EOF'
          FROM nginx:alpine
          COPY . /usr/share/nginx/html/
          COPY nginx.conf /etc/nginx/conf.d/default.conf
          EXPOSE 80
          CMD ["nginx", "-g", "daemon off;"]
          EOF
          
      - name: Build Docker image
        run: |
          cd admin-dashboard-local
          docker build -t ${{ env.DOCKER_IMAGE }}:${{ github.sha }} .
          docker tag ${{ env.DOCKER_IMAGE }}:${{ github.sha }} ${{ env.DOCKER_IMAGE }}:latest
          
      - name: Save Docker image
        run: |
          docker save ${{ env.DOCKER_IMAGE }}:latest | gzip > dashboard-image.tar.gz
          
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: dashboard-image
          path: dashboard-image.tar.gz
          retention-days: 1

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: dashboard-image
          
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SERVER_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ env.SERVER_HOST }} >> ~/.ssh/known_hosts
          
      - name: Deploy to server
        run: |
          # Copy image to server
          scp dashboard-image.tar.gz ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }}:/tmp/
          
          # Deploy on server
          ssh ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} << 'EOF'
            # Load new image
            docker load < /tmp/dashboard-image.tar.gz
            
            # Backup current container
            docker commit admin-dashboard admin-dashboard:backup-$(date +%Y%m%d-%H%M%S)
            
            # Stop and remove old container
            docker stop admin-dashboard || true
            docker rm admin-dashboard || true
            
            # Start new container
            docker run -d \
              --name admin-dashboard \
              --restart unless-stopped \
              -p 3007:80 \
              admin-dashboard:latest
            
            # Health check
            sleep 5
            if curl -f http://localhost:3007 > /dev/null 2>&1; then
              echo "✅ Deployment successful"
              # Clean up old images (keep last 3)
              docker images | grep admin-dashboard | grep backup | sort -r | tail -n +4 | awk '{print $3}' | xargs -r docker rmi
            else
              echo "❌ Deployment failed, rolling back"
              docker stop admin-dashboard || true
              docker rm admin-dashboard || true
              LATEST_BACKUP=$(docker images | grep admin-dashboard | grep backup | head -1 | awk '{print $2}')
              docker tag admin-dashboard:$LATEST_BACKUP admin-dashboard:latest
              docker run -d --name admin-dashboard --restart unless-stopped -p 3007:80 admin-dashboard:latest
              exit 1
            fi
            
            # Clean up
            rm -f /tmp/dashboard-image.tar.gz
          EOF
          
      - name: Send notification
        if: always()
        run: |
          STATUS="${{ job.status }}"
          if [ "$STATUS" = "success" ]; then
            TITLE="✅ Dashboard Deployed"
            BODY="Admin dashboard deployed successfully to production"
          else
            TITLE="❌ Deployment Failed"
            BODY="Admin dashboard deployment failed. Check GitHub Actions logs."
          fi
          
          curl -X POST https://admin.agistaffers.com/push-api/api/broadcast \
            -H "Content-Type: application/json" \
            -d "{\"title\": \"$TITLE\", \"body\": \"$BODY\"}" || true
            
      - name: Update deployment status
        if: success()
        run: |
          echo "Deployment completed at $(date)" >> deployment-log.txt
          echo "Commit: ${{ github.sha }}" >> deployment-log.txt
          echo "Actor: ${{ github.actor }}" >> deployment-log.txt