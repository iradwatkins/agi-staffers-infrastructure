// AGI Staffers Multi-Tenant Hosting Platform Schema
// This schema is for the main hosting infrastructure that manages client websites

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Customer account management
model Customer {
  id            String    @id @default(uuid()) @db.Uuid
  email         String    @unique
  companyName   String?   @map("company_name")
  contactName   String?   @map("contact_name")
  contactPhone  String?   @map("contact_phone")
  plan          String    @default("starter") // starter, professional, enterprise
  status        String    @default("active") // active, suspended, cancelled
  billingEmail  String?   @map("billing_email")
  stripeId      String?   @unique @map("stripe_customer_id")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  
  sites         CustomerSite[]
  invoices      Invoice[]
  supportTickets SupportTicket[]
  
  @@map("customers")
}

// Customer website deployments
model CustomerSite {
  id                String    @id @default(uuid()) @db.Uuid
  customerId        String    @map("customer_id") @db.Uuid
  siteName          String    @map("site_name")
  domain            String    @unique
  subdomain         String?   @unique // For *.agistaffers.com subdomains
  templateId        String?   @map("template_id") @db.Uuid
  containerId       String?   @unique @map("container_id")
  status            String    @default("pending") // pending, queued, deploying, active, suspended, failed
  sslEnabled        Boolean   @default(true) @map("ssl_enabled")
  deploymentConfig  Json      @default("{}") @map("deployment_config") @db.JsonB
  customization     Json      @default("{}") @db.JsonB
  resourceLimits    Json      @default("{}") @map("resource_limits") @db.JsonB
  metrics           Json      @default("{}") @db.JsonB
  lastDeployedAt    DateTime? @map("last_deployed_at")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  
  customer          Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  template          SiteTemplate? @relation(fields: [templateId], references: [id])
  backups           Backup[]
  deploymentLogs    DeploymentLog[]
  
  @@map("customer_sites")
}

// Website templates
model SiteTemplate {
  id                String    @id @default(uuid()) @db.Uuid
  templateName      String    @unique @map("template_name")
  displayName       String    @map("display_name")
  description       String?
  category          String    // business, ecommerce, portfolio, blog, landing, restaurant, saas, event, realestate, nonprofit
  thumbnailUrl      String?   @map("thumbnail_url")
  previewUrl        String?   @map("preview_url")
  sourcePath        String    @map("source_path") // Path to template files
  dockerImage       String?   @map("docker_image") // Optional custom Docker image
  defaultConfig     Json      @default("{}") @map("default_config") @db.JsonB
  features          String[]  @default([])
  requiredEnvVars   String[]  @default([]) @map("required_env_vars")
  isActive          Boolean   @default(true) @map("is_active")
  usageCount        Int       @default(0) @map("usage_count")
  version           String    @default("1.0.0")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  
  sites             CustomerSite[]
  
  @@map("site_templates")
}

// Backup management
model Backup {
  id                String    @id @default(uuid()) @db.Uuid
  siteId            String    @map("site_id") @db.Uuid
  backupType        String    @map("backup_type") // full, incremental, database, files
  status            String    @default("pending") // pending, in_progress, completed, failed
  size              BigInt?   // Size in bytes
  storageLocation   String?   @map("storage_location")
  metadata          Json      @default("{}") @db.JsonB
  error             String?
  startedAt         DateTime? @map("started_at")
  completedAt       DateTime? @map("completed_at")
  expiresAt         DateTime? @map("expires_at")
  createdAt         DateTime  @default(now()) @map("created_at")
  
  site              CustomerSite @relation(fields: [siteId], references: [id], onDelete: Cascade)
  
  @@map("backups")
}

// Deployment logs
model DeploymentLog {
  id                String    @id @default(uuid()) @db.Uuid
  siteId            String    @map("site_id") @db.Uuid
  action            String    // deploy, update, rollback, delete
  status            String    // started, completed, failed
  message           String?
  details           Json      @default("{}") @db.JsonB
  performedBy       String?   @map("performed_by")
  duration          Int?      // Duration in seconds
  createdAt         DateTime  @default(now()) @map("created_at")
  
  site              CustomerSite @relation(fields: [siteId], references: [id], onDelete: Cascade)
  
  @@map("deployment_logs")
}

// Monitoring metrics
model Metric {
  id                String    @id @default(cuid())
  siteId            String?   @map("site_id") @db.Uuid
  metricType        String    @map("metric_type") // cpu, memory, disk, bandwidth, requests, errors
  value             Float
  unit              String    // percentage, bytes, requests, ms
  metadata          Json      @default("{}") @db.JsonB
  timestamp         DateTime  @default(now())
  
  @@index([siteId, metricType, timestamp])
  @@map("metrics")
}

// Support tickets
model SupportTicket {
  id                String    @id @default(uuid()) @db.Uuid
  customerId        String    @map("customer_id") @db.Uuid
  subject           String
  description       String
  priority          String    @default("normal") // low, normal, high, critical
  status            String    @default("open") // open, in_progress, resolved, closed
  category          String?   // technical, billing, deployment, other
  assignedTo        String?   @map("assigned_to")
  resolvedAt        DateTime? @map("resolved_at")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  
  customer          Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  messages          TicketMessage[]
  
  @@map("support_tickets")
}

// Support ticket messages
model TicketMessage {
  id                String    @id @default(uuid()) @db.Uuid
  ticketId          String    @map("ticket_id") @db.Uuid
  message           String
  isStaffReply      Boolean   @default(false) @map("is_staff_reply")
  authorName        String    @map("author_name")
  attachments       Json      @default("[]") @db.JsonB
  createdAt         DateTime  @default(now()) @map("created_at")
  
  ticket            SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  
  @@map("ticket_messages")
}

// Billing and invoices
model Invoice {
  id                String    @id @default(uuid()) @db.Uuid
  customerId        String    @map("customer_id") @db.Uuid
  invoiceNumber     String    @unique @map("invoice_number")
  amount            Decimal   @db.Decimal(10, 2)
  currency          String    @default("USD")
  status            String    @default("pending") // pending, paid, overdue, cancelled
  dueDate           DateTime  @map("due_date")
  paidAt            DateTime? @map("paid_at")
  billingPeriod     String    @map("billing_period") // monthly, quarterly, annual
  items             Json      @default("[]") @db.JsonB
  stripeInvoiceId   String?   @unique @map("stripe_invoice_id")
  createdAt         DateTime  @default(now()) @map("created_at")
  
  customer          Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  
  @@map("invoices")
}

// System settings
model SystemSetting {
  id                String    @id @default(uuid()) @db.Uuid
  key               String    @unique
  value             Json      @db.JsonB
  category          String    // general, email, security, deployment, monitoring
  description       String?
  updatedAt         DateTime  @updatedAt @map("updated_at")
  
  @@map("system_settings")
}

// Admin users (separate from customers)
model AdminUser {
  id                String    @id @default(uuid()) @db.Uuid
  email             String    @unique
  name              String
  passwordHash      String    @map("password_hash")
  role              String    @default("admin") // super_admin, admin, support
  isActive          Boolean   @default(true) @map("is_active")
  lastLoginAt       DateTime? @map("last_login_at")
  
  // 2FA fields (BMAD addition)
  twoFactorEnabled  Boolean   @default(false) @map("two_factor_enabled")
  twoFactorSecret   String?   @map("two_factor_secret")
  twoFactorBackupCodes String? @map("two_factor_backup_codes")
  
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  
  sessions          AdminSession[]
  
  @@map("admin_users")
}

// Admin sessions
model AdminSession {
  id                String    @id @default(uuid()) @db.Uuid
  adminId           String    @map("admin_id") @db.Uuid
  token             String    @unique
  ipAddress         String?   @map("ip_address")
  userAgent         String?   @map("user_agent")
  expiresAt         DateTime  @map("expires_at")
  createdAt         DateTime  @default(now()) @map("created_at")
  
  admin             AdminUser @relation(fields: [adminId], references: [id], onDelete: Cascade)
  
  @@map("admin_sessions")
}

// NextAuth.js Models for Magic Link Authentication
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}